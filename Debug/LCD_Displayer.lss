
LCD_Displayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00002668  000026fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080019c  0080019c  00002838  2**0
                  ALLOC
  3 .stab         000024a8  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bb3  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006893  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009279  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a747  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ba54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000bc34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 12 	call	0x255a	; 0x255a <main>
      8a:	0c 94 32 13 	jmp	0x2664	; 0x2664 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e9 56       	subi	r30, 0x69	; 105
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <PWM_Timer0_Start>:
 *      Author: adham
 */

#include "PWM_Timer0.h"
#include "avr/io.h"
void PWM_Timer0_Start(uint8 duty_cycle) {
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Initilize the timer zero
	 */
	TCNT0 = 0; // Set Timer Initial Value to 0
     efa:	e2 e5       	ldi	r30, 0x52	; 82
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	10 82       	st	Z, r1

	OCR0 = (uint8)(((float32)duty_cycle/100)*256); //Set Compare value
     f00:	0c e5       	ldi	r16, 0x5C	; 92
     f02:	10 e0       	ldi	r17, 0x00	; 0
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	48 ec       	ldi	r20, 0xC8	; 200
     f24:	52 e4       	ldi	r21, 0x42	; 66
     f26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e8       	ldi	r20, 0x80	; 128
     f38:	53 e4       	ldi	r21, 0x43	; 67
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	f8 01       	movw	r30, r16
     f50:	80 83       	st	Z, r24

	DDRB = DDRB | (1 << PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
     f52:	a7 e3       	ldi	r26, 0x37	; 55
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e7 e3       	ldi	r30, 0x37	; 55
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     f60:	e3 e5       	ldi	r30, 0x53	; 83
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	8a e6       	ldi	r24, 0x6A	; 106
     f66:	80 83       	st	Z, r24
}
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <GPIO_setupPinDirection+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <GPIO_setupPinDirection+0x8>
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	6a 83       	std	Y+2, r22	; 0x02
     f86:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	88 30       	cpi	r24, 0x08	; 8
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <GPIO_setupPinDirection+0x1c>
     f8e:	d5 c0       	rjmp	.+426    	; 0x113a <GPIO_setupPinDirection+0x1c6>
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	08 f0       	brcs	.+2      	; 0xf98 <GPIO_setupPinDirection+0x24>
     f96:	d1 c0       	rjmp	.+418    	; 0x113a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3d 83       	std	Y+5, r19	; 0x05
     fa0:	2c 83       	std	Y+4, r18	; 0x04
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <GPIO_setupPinDirection+0x3a>
     fac:	43 c0       	rjmp	.+134    	; 0x1034 <GPIO_setupPinDirection+0xc0>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <GPIO_setupPinDirection+0x4e>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	71 f0       	breq	.+28     	; 0xfdc <GPIO_setupPinDirection+0x68>
     fc0:	bc c0       	rjmp	.+376    	; 0x113a <GPIO_setupPinDirection+0x1c6>
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	09 f4       	brne	.+2      	; 0xfce <GPIO_setupPinDirection+0x5a>
     fcc:	5f c0       	rjmp	.+190    	; 0x108c <GPIO_setupPinDirection+0x118>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <GPIO_setupPinDirection+0x66>
     fd8:	85 c0       	rjmp	.+266    	; 0x10e4 <GPIO_setupPinDirection+0x170>
     fda:	af c0       	rjmp	.+350    	; 0x113a <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	a1 f4       	brne	.+40     	; 0x100a <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     fe2:	aa e3       	ldi	r26, 0x3A	; 58
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_setupPinDirection+0x8c>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_setupPinDirection+0x88>
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	98 c0       	rjmp	.+304    	; 0x113a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    100a:	aa e3       	ldi	r26, 0x3A	; 58
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea e3       	ldi	r30, 0x3A	; 58
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_setupPinDirection+0xb4>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_setupPinDirection+0xb0>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	83 c0       	rjmp	.+262    	; 0x113a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	a1 f4       	brne	.+40     	; 0x1062 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    103a:	a7 e3       	ldi	r26, 0x37	; 55
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <GPIO_setupPinDirection+0xe4>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <GPIO_setupPinDirection+0xe0>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	6c c0       	rjmp	.+216    	; 0x113a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x10c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x108>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	57 c0       	rjmp	.+174    	; 0x113a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	a1 f4       	brne	.+40     	; 0x10ba <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    1092:	a4 e3       	ldi	r26, 0x34	; 52
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e4 e3       	ldi	r30, 0x34	; 52
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <GPIO_setupPinDirection+0x13c>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <GPIO_setupPinDirection+0x138>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	40 c0       	rjmp	.+128    	; 0x113a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    10ba:	a4 e3       	ldi	r26, 0x34	; 52
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e4 e3       	ldi	r30, 0x34	; 52
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0x164>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0x160>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	2b c0       	rjmp	.+86     	; 0x113a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	a1 f4       	brne	.+40     	; 0x1112 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    10ea:	a1 e3       	ldi	r26, 0x31	; 49
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e1 e3       	ldi	r30, 0x31	; 49
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <GPIO_setupPinDirection+0x194>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <GPIO_setupPinDirection+0x190>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	14 c0       	rjmp	.+40     	; 0x113a <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    1112:	a1 e3       	ldi	r26, 0x31	; 49
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e1 e3       	ldi	r30, 0x31	; 49
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x1bc>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x1b8>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <GPIO_writePin+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <GPIO_writePin+0x8>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	6a 83       	std	Y+2, r22	; 0x02
    115c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	88 30       	cpi	r24, 0x08	; 8
    1162:	08 f0       	brcs	.+2      	; 0x1166 <GPIO_writePin+0x1c>
    1164:	d5 c0       	rjmp	.+426    	; 0x1310 <GPIO_writePin+0x1c6>
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	08 f0       	brcs	.+2      	; 0x116e <GPIO_writePin+0x24>
    116c:	d1 c0       	rjmp	.+418    	; 0x1310 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* putting the port value as required */
		switch (port_num) {
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3d 83       	std	Y+5, r19	; 0x05
    1176:	2c 83       	std	Y+4, r18	; 0x04
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <GPIO_writePin+0x3a>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <GPIO_writePin+0xc0>
    1184:	2c 81       	ldd	r18, Y+4	; 0x04
    1186:	3d 81       	ldd	r19, Y+5	; 0x05
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	2c f4       	brge	.+10     	; 0x1198 <GPIO_writePin+0x4e>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	71 f0       	breq	.+28     	; 0x11b2 <GPIO_writePin+0x68>
    1196:	bc c0       	rjmp	.+376    	; 0x1310 <GPIO_writePin+0x1c6>
    1198:	2c 81       	ldd	r18, Y+4	; 0x04
    119a:	3d 81       	ldd	r19, Y+5	; 0x05
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <GPIO_writePin+0x5a>
    11a2:	5f c0       	rjmp	.+190    	; 0x1262 <GPIO_writePin+0x118>
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <GPIO_writePin+0x66>
    11ae:	85 c0       	rjmp	.+266    	; 0x12ba <GPIO_writePin+0x170>
    11b0:	af c0       	rjmp	.+350    	; 0x1310 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == 0)
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 23       	and	r24, r24
    11b6:	a9 f4       	brne	.+42     	; 0x11e2 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num);
    11b8:	ab e3       	ldi	r26, 0x3B	; 59
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e3       	ldi	r30, 0x3B	; 59
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_writePin+0x8c>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_writePin+0x88>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	97 c0       	rjmp	.+302    	; 0x1310 <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTA, pin_num);
    11e2:	ab e3       	ldi	r26, 0x3B	; 59
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_writePin+0xb6>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_writePin+0xb2>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	83 c0       	rjmp	.+262    	; 0x1310 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if (value == 0)
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 23       	and	r24, r24
    120e:	a9 f4       	brne	.+42     	; 0x123a <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
    1210:	a8 e3       	ldi	r26, 0x38	; 56
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e8 e3       	ldi	r30, 0x38	; 56
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_writePin+0xe4>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_writePin+0xe0>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	6b c0       	rjmp	.+214    	; 0x1310 <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTB, pin_num);
    123a:	a8 e3       	ldi	r26, 0x38	; 56
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e8 e3       	ldi	r30, 0x38	; 56
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <GPIO_writePin+0x10e>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <GPIO_writePin+0x10a>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	57 c0       	rjmp	.+174    	; 0x1310 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if (value == 0)
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 23       	and	r24, r24
    1266:	a9 f4       	brne	.+42     	; 0x1292 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_writePin+0x13c>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_writePin+0x138>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	3f c0       	rjmp	.+126    	; 0x1310 <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTC, pin_num);
    1292:	a5 e3       	ldi	r26, 0x35	; 53
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <GPIO_writePin+0x166>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <GPIO_writePin+0x162>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	2b c0       	rjmp	.+86     	; 0x1310 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if (value == 0)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 23       	and	r24, r24
    12be:	a9 f4       	brne	.+42     	; 0x12ea <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
    12c0:	a2 e3       	ldi	r26, 0x32	; 50
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e3       	ldi	r30, 0x32	; 50
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <GPIO_writePin+0x194>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <GPIO_writePin+0x190>
    12e2:	80 95       	com	r24
    12e4:	84 23       	and	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <GPIO_writePin+0x1c6>
			else
				SET_BIT(PORTD, pin_num);
    12ea:	a2 e3       	ldi	r26, 0x32	; 50
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e2 e3       	ldi	r30, 0x32	; 50
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_writePin+0x1be>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_writePin+0x1ba>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
			break;
		}
	}

}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	2a 97       	sbiw	r28, 0x0a	; 10
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	18 f4       	brcc	.+6      	; 0x1344 <GPIO_readPin+0x24>
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	10 f0       	brcs	.+4      	; 0x1348 <GPIO_readPin+0x28>
		return LOGIC_LOW;
    1344:	19 86       	std	Y+9, r1	; 0x09
    1346:	8a c0       	rjmp	.+276    	; 0x145c <GPIO_readPin+0x13c>
	} else {
		/* getting the required pin value */
		switch (port_num) {
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	38 87       	std	Y+8, r19	; 0x08
    1350:	2f 83       	std	Y+7, r18	; 0x07
    1352:	4f 81       	ldd	r20, Y+7	; 0x07
    1354:	58 85       	ldd	r21, Y+8	; 0x08
    1356:	41 30       	cpi	r20, 0x01	; 1
    1358:	51 05       	cpc	r21, r1
    135a:	89 f1       	breq	.+98     	; 0x13be <GPIO_readPin+0x9e>
    135c:	8f 81       	ldd	r24, Y+7	; 0x07
    135e:	98 85       	ldd	r25, Y+8	; 0x08
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	91 05       	cpc	r25, r1
    1364:	34 f4       	brge	.+12     	; 0x1372 <GPIO_readPin+0x52>
    1366:	2f 81       	ldd	r18, Y+7	; 0x07
    1368:	38 85       	ldd	r19, Y+8	; 0x08
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	69 f0       	breq	.+26     	; 0x138a <GPIO_readPin+0x6a>
    1370:	74 c0       	rjmp	.+232    	; 0x145a <GPIO_readPin+0x13a>
    1372:	4f 81       	ldd	r20, Y+7	; 0x07
    1374:	58 85       	ldd	r21, Y+8	; 0x08
    1376:	42 30       	cpi	r20, 0x02	; 2
    1378:	51 05       	cpc	r21, r1
    137a:	d9 f1       	breq	.+118    	; 0x13f2 <GPIO_readPin+0xd2>
    137c:	8f 81       	ldd	r24, Y+7	; 0x07
    137e:	98 85       	ldd	r25, Y+8	; 0x08
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_readPin+0x68>
    1386:	4f c0       	rjmp	.+158    	; 0x1426 <GPIO_readPin+0x106>
    1388:	68 c0       	rjmp	.+208    	; 0x145a <GPIO_readPin+0x13a>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    138a:	e9 e3       	ldi	r30, 0x39	; 57
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_readPin+0x82>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_readPin+0x7e>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	90 70       	andi	r25, 0x00	; 0
    13ac:	88 23       	and	r24, r24
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <GPIO_readPin+0x96>
    13b0:	51 e0       	ldi	r21, 0x01	; 1
    13b2:	5e 83       	std	Y+6, r21	; 0x06
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <GPIO_readPin+0x98>
    13b6:	1e 82       	std	Y+6, r1	; 0x06
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ba:	89 87       	std	Y+9, r24	; 0x09
    13bc:	4f c0       	rjmp	.+158    	; 0x145c <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    13be:	e6 e3       	ldi	r30, 0x36	; 54
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_readPin+0xb6>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_readPin+0xb2>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	88 23       	and	r24, r24
    13e2:	19 f0       	breq	.+6      	; 0x13ea <GPIO_readPin+0xca>
    13e4:	51 e0       	ldi	r21, 0x01	; 1
    13e6:	5d 83       	std	Y+5, r21	; 0x05
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <GPIO_readPin+0xcc>
    13ea:	1d 82       	std	Y+5, r1	; 0x05
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	89 87       	std	Y+9, r24	; 0x09
    13f0:	35 c0       	rjmp	.+106    	; 0x145c <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    13f2:	e3 e3       	ldi	r30, 0x33	; 51
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_readPin+0xea>
    1406:	55 95       	asr	r21
    1408:	47 95       	ror	r20
    140a:	8a 95       	dec	r24
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_readPin+0xe6>
    140e:	ca 01       	movw	r24, r20
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	88 23       	and	r24, r24
    1416:	19 f0       	breq	.+6      	; 0x141e <GPIO_readPin+0xfe>
    1418:	51 e0       	ldi	r21, 0x01	; 1
    141a:	5c 83       	std	Y+4, r21	; 0x04
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <GPIO_readPin+0x100>
    141e:	1c 82       	std	Y+4, r1	; 0x04
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	89 87       	std	Y+9, r24	; 0x09
    1424:	1b c0       	rjmp	.+54     	; 0x145c <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1426:	e0 e3       	ldi	r30, 0x30	; 48
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a9 01       	movw	r20, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_readPin+0x11e>
    143a:	55 95       	asr	r21
    143c:	47 95       	ror	r20
    143e:	8a 95       	dec	r24
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_readPin+0x11a>
    1442:	ca 01       	movw	r24, r20
    1444:	81 70       	andi	r24, 0x01	; 1
    1446:	90 70       	andi	r25, 0x00	; 0
    1448:	88 23       	and	r24, r24
    144a:	19 f0       	breq	.+6      	; 0x1452 <GPIO_readPin+0x132>
    144c:	51 e0       	ldi	r21, 0x01	; 1
    144e:	5b 83       	std	Y+3, r21	; 0x03
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <GPIO_readPin+0x134>
    1452:	1b 82       	std	Y+3, r1	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	89 87       	std	Y+9, r24	; 0x09
    1458:	01 c0       	rjmp	.+2      	; 0x145c <GPIO_readPin+0x13c>
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_readPin+0x140>
			break;
		}
	}
}
    145c:	99 85       	ldd	r25, Y+9	; 0x09
    145e:	9a 87       	std	Y+10, r25	; 0x0a
    1460:	8a 85       	ldd	r24, Y+10	; 0x0a
    1462:	2a 96       	adiw	r28, 0x0a	; 10
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_setupPortDirection+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_setupPortDirection+0x8>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	90 f5       	brcc	.+100    	; 0x14ee <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3c 83       	std	Y+4, r19	; 0x04
    1492:	2b 83       	std	Y+3, r18	; 0x03
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	91 05       	cpc	r25, r1
    149c:	d1 f0       	breq	.+52     	; 0x14d2 <GPIO_setupPortDirection+0x5e>
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	3c 81       	ldd	r19, Y+4	; 0x04
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <GPIO_setupPortDirection+0x3e>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <GPIO_setupPortDirection+0x54>
    14b0:	1e c0       	rjmp	.+60     	; 0x14ee <GPIO_setupPortDirection+0x7a>
    14b2:	2b 81       	ldd	r18, Y+3	; 0x03
    14b4:	3c 81       	ldd	r19, Y+4	; 0x04
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	81 f0       	breq	.+32     	; 0x14dc <GPIO_setupPortDirection+0x68>
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	81 f0       	breq	.+32     	; 0x14e6 <GPIO_setupPortDirection+0x72>
    14c6:	13 c0       	rjmp	.+38     	; 0x14ee <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    14c8:	ea e3       	ldi	r30, 0x3A	; 58
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
    14d0:	0e c0       	rjmp	.+28     	; 0x14ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
    14da:	09 c0       	rjmp	.+18     	; 0x14ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14dc:	e4 e3       	ldi	r30, 0x34	; 52
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14e6:	e1 e3       	ldi	r30, 0x31	; 49
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
			break;
		}
	}
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GPIO_writePort+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <GPIO_writePort+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	90 f5       	brcc	.+100    	; 0x1576 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the required port as required */
		switch (port_num) {
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3c 83       	std	Y+4, r19	; 0x04
    151a:	2b 83       	std	Y+3, r18	; 0x03
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	d1 f0       	breq	.+52     	; 0x155a <GPIO_writePort+0x5e>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	2c f4       	brge	.+10     	; 0x153a <GPIO_writePort+0x3e>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 f0       	breq	.+24     	; 0x1550 <GPIO_writePort+0x54>
    1538:	1e c0       	rjmp	.+60     	; 0x1576 <GPIO_writePort+0x7a>
    153a:	2b 81       	ldd	r18, Y+3	; 0x03
    153c:	3c 81       	ldd	r19, Y+4	; 0x04
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	81 f0       	breq	.+32     	; 0x1564 <GPIO_writePort+0x68>
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	81 f0       	breq	.+32     	; 0x156e <GPIO_writePort+0x72>
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    155a:	e8 e3       	ldi	r30, 0x38	; 56
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
			break;
		}
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <GPIO_readPort+0x6>
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_readPort+0x8>
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	10 f0       	brcs	.+4      	; 0x159e <GPIO_readPort+0x1a>
		return 0; // if the port does not exist
    159a:	1c 82       	std	Y+4, r1	; 0x04
    159c:	34 c0       	rjmp	.+104    	; 0x1606 <GPIO_readPort+0x82>
	} else {
		/* Get the required pin */
		switch (port_num) {
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3b 83       	std	Y+3, r19	; 0x03
    15a6:	2a 83       	std	Y+2, r18	; 0x02
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	9b 81       	ldd	r25, Y+3	; 0x03
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	d1 f0       	breq	.+52     	; 0x15e6 <GPIO_readPort+0x62>
    15b2:	2a 81       	ldd	r18, Y+2	; 0x02
    15b4:	3b 81       	ldd	r19, Y+3	; 0x03
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <GPIO_readPort+0x42>
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	61 f0       	breq	.+24     	; 0x15dc <GPIO_readPort+0x58>
    15c4:	1f c0       	rjmp	.+62     	; 0x1604 <GPIO_readPort+0x80>
    15c6:	2a 81       	ldd	r18, Y+2	; 0x02
    15c8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	81 f0       	breq	.+32     	; 0x15f0 <GPIO_readPort+0x6c>
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	81 f0       	breq	.+32     	; 0x15fa <GPIO_readPort+0x76>
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <GPIO_readPort+0x80>
		case PORTA_ID:
			return PINA;
    15dc:	e9 e3       	ldi	r30, 0x39	; 57
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	90 81       	ld	r25, Z
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			return PINB;
    15e6:	e6 e3       	ldi	r30, 0x36	; 54
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	20 81       	ld	r18, Z
    15ec:	2c 83       	std	Y+4, r18	; 0x04
    15ee:	0b c0       	rjmp	.+22     	; 0x1606 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			return PINC;
    15f0:	e3 e3       	ldi	r30, 0x33	; 51
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	30 81       	ld	r19, Z
    15f6:	3c 83       	std	Y+4, r19	; 0x04
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			return PIND;
    15fa:	e0 e3       	ldi	r30, 0x30	; 48
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8c 83       	std	Y+4, r24	; 0x04
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <GPIO_readPort+0x82>
    1604:	02 c0       	rjmp	.+4      	; 0x160a <GPIO_readPort+0x86>
			break;
		}
	}
}
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	9d 83       	std	Y+5, r25	; 0x05
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <GPIO_togglePin>:


uint8 GPIO_togglePin(uint8 port_num, uint8 pin_num){
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <GPIO_togglePin+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <GPIO_togglePin+0x8>
    1624:	00 d0       	rcall	.+0      	; 0x1626 <GPIO_togglePin+0xa>
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	6a 83       	std	Y+2, r22	; 0x02
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 30       	cpi	r24, 0x08	; 8
    1632:	08 f0       	brcs	.+2      	; 0x1636 <GPIO_togglePin+0x1a>
    1634:	7b c0       	rjmp	.+246    	; 0x172c <GPIO_togglePin+0x110>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	08 f0       	brcs	.+2      	; 0x163e <GPIO_togglePin+0x22>
    163c:	77 c0       	rjmp	.+238    	; 0x172c <GPIO_togglePin+0x110>
			/*Do nothing*/
		} else {
			/* getting the required pin value */
			switch (port_num) {
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3d 83       	std	Y+5, r19	; 0x05
    1646:	2c 83       	std	Y+4, r18	; 0x04
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	61 f1       	breq	.+88     	; 0x16aa <GPIO_togglePin+0x8e>
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	3d 81       	ldd	r19, Y+5	; 0x05
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <GPIO_togglePin+0x4a>
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	69 f0       	breq	.+26     	; 0x167e <GPIO_togglePin+0x62>
    1664:	63 c0       	rjmp	.+198    	; 0x172c <GPIO_togglePin+0x110>
    1666:	2c 81       	ldd	r18, Y+4	; 0x04
    1668:	3d 81       	ldd	r19, Y+5	; 0x05
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	91 f1       	breq	.+100    	; 0x16d4 <GPIO_togglePin+0xb8>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <GPIO_togglePin+0x60>
    167a:	42 c0       	rjmp	.+132    	; 0x1700 <GPIO_togglePin+0xe4>
    167c:	57 c0       	rjmp	.+174    	; 0x172c <GPIO_togglePin+0x110>
			case PORTA_ID:
				return TOGGLE_BIT(PORTA,pin_num);
    167e:	ab e3       	ldi	r26, 0x3B	; 59
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e3       	ldi	r30, 0x3B	; 59
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_togglePin+0x80>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_togglePin+0x7c>
    16a0:	84 27       	eor	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	9c 91       	ld	r25, X
    16a6:	9b 83       	std	Y+3, r25	; 0x03
    16a8:	42 c0       	rjmp	.+132    	; 0x172e <GPIO_togglePin+0x112>
				break;
			case PORTB_ID:
				return TOGGLE_BIT(PORTB,pin_num);
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_togglePin+0xaa>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	2a 95       	dec	r18
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_togglePin+0xa6>
    16ca:	84 27       	eor	r24, r20
    16cc:	8c 93       	st	X, r24
    16ce:	2c 91       	ld	r18, X
    16d0:	2b 83       	std	Y+3, r18	; 0x03
    16d2:	2d c0       	rjmp	.+90     	; 0x172e <GPIO_togglePin+0x112>
				break;
			case PORTC_ID:
				return TOGGLE_BIT(PORTC,pin_num);
    16d4:	a5 e3       	ldi	r26, 0x35	; 53
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_togglePin+0xd6>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_togglePin+0xd2>
    16f6:	84 27       	eor	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	3c 91       	ld	r19, X
    16fc:	3b 83       	std	Y+3, r19	; 0x03
    16fe:	17 c0       	rjmp	.+46     	; 0x172e <GPIO_togglePin+0x112>
				break;
			case PORTD_ID:
				return TOGGLE_BIT(PORTD,pin_num);
    1700:	a2 e3       	ldi	r26, 0x32	; 50
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e3       	ldi	r30, 0x32	; 50
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_togglePin+0x102>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_togglePin+0xfe>
    1722:	84 27       	eor	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	8c 91       	ld	r24, X
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	01 c0       	rjmp	.+2      	; 0x172e <GPIO_togglePin+0x112>
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_togglePin+0x116>
				break;
			}
		}
}
    172e:	9b 81       	ldd	r25, Y+3	; 0x03
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8e 81       	ldd	r24, Y+6	; 0x06
    1734:	26 96       	adiw	r28, 0x06	; 6
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <ADC_init>:
#include "avr/io.h"
#include "../../common_macros.h"
/*
 * Description: Initing the ADC Module
 * */
void ADC_init (const ADC_ConfigType const* config_ptr){
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <ADC_init+0x6>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01


	ADMUX = (config_ptr->ref_volts)<<6;
    1754:	a7 e2       	ldi	r26, 0x27	; 39
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e9 81       	ldd	r30, Y+1	; 0x01
    175a:	fa 81       	ldd	r31, Y+2	; 0x02
    175c:	80 81       	ld	r24, Z
    175e:	82 95       	swap	r24
    1760:	88 0f       	add	r24, r24
    1762:	88 0f       	add	r24, r24
    1764:	80 7c       	andi	r24, 0xC0	; 192
    1766:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADLAR);
    1768:	a7 e2       	ldi	r26, 0x27	; 39
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e2       	ldi	r30, 0x27	; 39
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 7d       	andi	r24, 0xDF	; 223
    1774:	8c 93       	st	X, r24
	ADMUX &= 0xE0; /*selecting the channel zero as default*/
    1776:	a7 e2       	ldi	r26, 0x27	; 39
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e2       	ldi	r30, 0x27	; 39
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 7e       	andi	r24, 0xE0	; 224
    1782:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADEN);
    1784:	a6 e2       	ldi	r26, 0x26	; 38
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e6 e2       	ldi	r30, 0x26	; 38
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 68       	ori	r24, 0x80	; 128
    1790:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);
    1792:	a6 e2       	ldi	r26, 0x26	; 38
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e6 e2       	ldi	r30, 0x26	; 38
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	87 7f       	andi	r24, 0xF7	; 247
    179e:	8c 93       	st	X, r24

	ADCSRA=(ADCSRA&0xF8)|((config_ptr->prescaler)|(0x07));
    17a0:	a6 e2       	ldi	r26, 0x26	; 38
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e6 e2       	ldi	r30, 0x26	; 38
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	98 2f       	mov	r25, r24
    17ac:	98 7f       	andi	r25, 0xF8	; 248
    17ae:	e9 81       	ldd	r30, Y+1	; 0x01
    17b0:	fa 81       	ldd	r31, Y+2	; 0x02
    17b2:	81 81       	ldd	r24, Z+1	; 0x01
    17b4:	87 60       	ori	r24, 0x07	; 7
    17b6:	89 2b       	or	r24, r25
    17b8:	8c 93       	st	X, r24

}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <ADC_readChannel>:
/*
 * Description: reading the required channel from the ADC
 * */
uint16 ADC_readChannel(ADC_Channel channel){
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0xF8)|((channel)&(0x07));
    17d0:	a7 e2       	ldi	r26, 0x27	; 39
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e7 e2       	ldi	r30, 0x27	; 39
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	98 2f       	mov	r25, r24
    17dc:	98 7f       	andi	r25, 0xF8	; 248
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	87 70       	andi	r24, 0x07	; 7
    17e2:	89 2b       	or	r24, r25
    17e4:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC);
    17e6:	a6 e2       	ldi	r26, 0x26	; 38
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e6 e2       	ldi	r30, 0x26	; 38
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 64       	ori	r24, 0x40	; 64
    17f2:	8c 93       	st	X, r24

	while(!(GET_BIT(ADCSRA,ADIF)));
    17f4:	e6 e2       	ldi	r30, 0x26	; 38
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	80 71       	andi	r24, 0x10	; 16
    1800:	90 70       	andi	r25, 0x00	; 0
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	95 95       	asr	r25
    1810:	87 95       	ror	r24
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	79 f3       	breq	.-34     	; 0x17f4 <ADC_readChannel+0x30>

	SET_BIT(ADCSRA,ADIF);
    1816:	a6 e2       	ldi	r26, 0x26	; 38
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e6 e2       	ldi	r30, 0x26	; 38
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 61       	ori	r24, 0x10	; 16
    1822:	8c 93       	st	X, r24

	return ADC;
    1824:	e4 e2       	ldi	r30, 0x24	; 36
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01

}
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <LM35_init>:
#define ADC_MAX_VOLTAGE 2.56
static ADC_ConfigType ADC_configType;
static 	float64 factor = (MAX_TEMPERATURE*ADC_MAX_VOLTAGE)/(MAX_VOLTAGE*ADC_MAX_READING);


void LM35_init() {
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62

	ADC_configType.prescaler = ADC_DIVISION_FACTOR_8;
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	80 93 9d 01 	sts	0x019D, r24
	ADC_configType.ref_volts = ADC_2_56V;
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	80 93 9c 01 	sts	0x019C, r24

	ADC_init(&ADC_configType);
    1848:	8c e9       	ldi	r24, 0x9C	; 156
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <ADC_init>
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <LM35_readTemp>:

uint8 LM35_readTemp() {
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	uint8 channelReading= ADC_readChannel(LM35_CHANNEL);
    1860:	83 e0       	ldi	r24, 0x03	; 3
    1862:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <ADC_readChannel>
    1866:	89 83       	std	Y+1, r24	; 0x01
	return (uint8)(factor * channelReading);
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	aa 27       	eor	r26, r26
    1870:	97 fd       	sbrc	r25, 7
    1872:	a0 95       	com	r26
    1874:	ba 2f       	mov	r27, r26
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	20 91 97 01 	lds	r18, 0x0197
    1886:	30 91 98 01 	lds	r19, 0x0198
    188a:	40 91 99 01 	lds	r20, 0x0199
    188e:	50 91 9a 01 	lds	r21, 0x019A
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
}
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	2e 97       	sbiw	r28, 0x0e	; 14
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	41 e0       	ldi	r20, 0x01	; 1
    18d6:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_setupPinDirection>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 ea       	ldi	r26, 0xA0	; 160
    18e0:	b1 e4       	ldi	r27, 0x41	; 65
    18e2:	8b 87       	std	Y+11, r24	; 0x0b
    18e4:	9c 87       	std	Y+12, r25	; 0x0c
    18e6:	ad 87       	std	Y+13, r26	; 0x0d
    18e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a e7       	ldi	r20, 0x7A	; 122
    18f8:	53 e4       	ldi	r21, 0x43	; 67
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8f 83       	std	Y+7, r24	; 0x07
    1904:	98 87       	std	Y+8, r25	; 0x08
    1906:	a9 87       	std	Y+9, r26	; 0x09
    1908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <LCD_init+0x7a>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <LCD_init+0xf8>
	else if (__tmp > 65535)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	6b 85       	ldd	r22, Y+11	; 0x0b
    1946:	7c 85       	ldd	r23, Y+12	; 0x0c
    1948:	8d 85       	ldd	r24, Y+13	; 0x0d
    194a:	9e 85       	ldd	r25, Y+14	; 0x0e
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	0f c0       	rjmp	.+30     	; 0x198c <LCD_init+0xda>
    196e:	89 e1       	ldi	r24, 0x19	; 25
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_init+0xc8>
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <LCD_init+0xbc>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_init+0x104>
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	6f ef       	ldi	r22, 0xFF	; 255
    19c2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    19c6:	88 e3       	ldi	r24, 0x38	; 56
    19c8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19cc:	8c e0       	ldi	r24, 0x0C	; 12
    19ce:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
}
    19d8:	2e 96       	adiw	r28, 0x0e	; 14
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	6d 97       	sbiw	r28, 0x1d	; 29
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a0 e8       	ldi	r26, 0x80	; 128
    1a10:	bf e3       	ldi	r27, 0x3F	; 63
    1a12:	89 8f       	std	Y+25, r24	; 0x19
    1a14:	9a 8f       	std	Y+26, r25	; 0x1a
    1a16:	ab 8f       	std	Y+27, r26	; 0x1b
    1a18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4a e7       	ldi	r20, 0x7A	; 122
    1a28:	53 e4       	ldi	r21, 0x43	; 67
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8d 8b       	std	Y+21, r24	; 0x15
    1a34:	9e 8b       	std	Y+22, r25	; 0x16
    1a36:	af 8b       	std	Y+23, r26	; 0x17
    1a38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a40:	98 8d       	ldd	r25, Y+24	; 0x18
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <LCD_sendCommand+0x72>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 8b       	std	Y+20, r25	; 0x14
    1a58:	8b 8b       	std	Y+19, r24	; 0x13
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a60:	8f 89       	ldd	r24, Y+23	; 0x17
    1a62:	98 8d       	ldd	r25, Y+24	; 0x18
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	69 8d       	ldd	r22, Y+25	; 0x19
    1a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9c 8b       	std	Y+20, r25	; 0x14
    1a9a:	8b 8b       	std	Y+19, r24	; 0x13
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <LCD_sendCommand+0xd2>
    1a9e:	89 e1       	ldi	r24, 0x19	; 25
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9a 8b       	std	Y+18, r25	; 0x12
    1aa4:	89 8b       	std	Y+17, r24	; 0x11
    1aa6:	89 89       	ldd	r24, Y+17	; 0x11
    1aa8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_sendCommand+0xc0>
    1aae:	9a 8b       	std	Y+18, r25	; 0x12
    1ab0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	8b 89       	ldd	r24, Y+19	; 0x13
    1abe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <LCD_sendCommand+0xb4>
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
    1ada:	8b 89       	ldd	r24, Y+19	; 0x13
    1adc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ade:	98 8b       	std	Y+16, r25	; 0x10
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f
    1ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae4:	98 89       	ldd	r25, Y+16	; 0x10
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_sendCommand+0xfc>
    1aea:	98 8b       	std	Y+16, r25	; 0x10
    1aec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e8       	ldi	r26, 0x80	; 128
    1afe:	bf e3       	ldi	r27, 0x3F	; 63
    1b00:	8b 87       	std	Y+11, r24	; 0x0b
    1b02:	9c 87       	std	Y+12, r25	; 0x0c
    1b04:	ad 87       	std	Y+13, r26	; 0x0d
    1b06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	53 e4       	ldi	r21, 0x43	; 67
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8f 83       	std	Y+7, r24	; 0x07
    1b22:	98 87       	std	Y+8, r25	; 0x08
    1b24:	a9 87       	std	Y+9, r26	; 0x09
    1b26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <LCD_sendCommand+0x160>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <LCD_sendCommand+0x1c0>
    1b8c:	89 e1       	ldi	r24, 0x19	; 25
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_sendCommand+0x1ae>
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <LCD_sendCommand+0x1a2>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	9e 81       	ldd	r25, Y+6	; 0x06
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_sendCommand+0x1ea>
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_sendData(command);
    1bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bde:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_sendData>
}
    1be2:	6d 96       	adiw	r28, 0x1d	; 29
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	6d 97       	sbiw	r28, 0x1d	; 29
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e8       	ldi	r26, 0x80	; 128
    1c1a:	bf e3       	ldi	r27, 0x3F	; 63
    1c1c:	89 8f       	std	Y+25, r24	; 0x19
    1c1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c20:	ab 8f       	std	Y+27, r26	; 0x1b
    1c22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	69 8d       	ldd	r22, Y+25	; 0x19
    1c26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a e7       	ldi	r20, 0x7A	; 122
    1c32:	53 e4       	ldi	r21, 0x43	; 67
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8d 8b       	std	Y+21, r24	; 0x15
    1c3e:	9e 8b       	std	Y+22, r25	; 0x16
    1c40:	af 8b       	std	Y+23, r26	; 0x17
    1c42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c44:	6d 89       	ldd	r22, Y+21	; 0x15
    1c46:	7e 89       	ldd	r23, Y+22	; 0x16
    1c48:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9c 8b       	std	Y+20, r25	; 0x14
    1c62:	8b 8b       	std	Y+19, r24	; 0x13
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c66:	6d 89       	ldd	r22, Y+21	; 0x15
    1c68:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9c 8b       	std	Y+20, r25	; 0x14
    1ca4:	8b 8b       	std	Y+19, r24	; 0x13
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <LCD_displayCharacter+0xd2>
    1ca8:	89 e1       	ldi	r24, 0x19	; 25
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9a 8b       	std	Y+18, r25	; 0x12
    1cae:	89 8b       	std	Y+17, r24	; 0x11
    1cb0:	89 89       	ldd	r24, Y+17	; 0x11
    1cb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_displayCharacter+0xc0>
    1cb8:	9a 8b       	std	Y+18, r25	; 0x12
    1cba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9c 8b       	std	Y+20, r25	; 0x14
    1cc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <LCD_displayCharacter+0xb4>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce8:	98 8b       	std	Y+16, r25	; 0x10
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
    1cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cee:	98 89       	ldd	r25, Y+16	; 0x10
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_displayCharacter+0xfc>
    1cf4:	98 8b       	std	Y+16, r25	; 0x10
    1cf6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e8       	ldi	r26, 0x80	; 128
    1d08:	bf e3       	ldi	r27, 0x3F	; 63
    1d0a:	8b 87       	std	Y+11, r24	; 0x0b
    1d0c:	9c 87       	std	Y+12, r25	; 0x0c
    1d0e:	ad 87       	std	Y+13, r26	; 0x0d
    1d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a e7       	ldi	r20, 0x7A	; 122
    1d20:	53 e4       	ldi	r21, 0x43	; 67
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8f 83       	std	Y+7, r24	; 0x07
    1d2c:	98 87       	std	Y+8, r25	; 0x08
    1d2e:	a9 87       	std	Y+9, r26	; 0x09
    1d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d54:	6f 81       	ldd	r22, Y+7	; 0x07
    1d56:	78 85       	ldd	r23, Y+8	; 0x08
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <LCD_displayCharacter+0x1c0>
    1d96:	89 e1       	ldi	r24, 0x19	; 25
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_displayCharacter+0x1ae>
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <LCD_displayCharacter+0x1a2>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_displayCharacter+0x1ea>
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_sendData(data);
    1de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LCD_sendData>

}
    1dec:	6d 96       	adiw	r28, 0x1d	; 29
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(const char *Str){
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <LCD_displayString+0x6>
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	0a c0       	rjmp	.+20     	; 0x1e22 <LCD_displayString+0x24>
	while(*Str !='\0'){
		LCD_displayCharacter(*Str);
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	80 81       	ld	r24, Z
    1e14:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_displayCharacter>
		Str++;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(const char *Str){
	while(*Str !='\0'){
    1e22:	e9 81       	ldd	r30, Y+1	; 0x01
    1e24:	fa 81       	ldd	r31, Y+2	; 0x02
    1e26:	80 81       	ld	r24, Z
    1e28:	88 23       	and	r24, r24
    1e2a:	89 f7       	brne	.-30     	; 0x1e0e <LCD_displayString+0x10>
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <LCD_moveCursor+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <LCD_moveCursor+0x8>
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	3d 83       	std	Y+5, r19	; 0x05
    1e50:	2c 83       	std	Y+4, r18	; 0x04
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	9d 81       	ldd	r25, Y+5	; 0x05
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	91 05       	cpc	r25, r1
    1e5a:	c1 f0       	breq	.+48     	; 0x1e8c <LCD_moveCursor+0x56>
    1e5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e60:	22 30       	cpi	r18, 0x02	; 2
    1e62:	31 05       	cpc	r19, r1
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <LCD_moveCursor+0x3a>
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	61 f0       	breq	.+24     	; 0x1e86 <LCD_moveCursor+0x50>
    1e6e:	19 c0       	rjmp	.+50     	; 0x1ea2 <LCD_moveCursor+0x6c>
    1e70:	2c 81       	ldd	r18, Y+4	; 0x04
    1e72:	3d 81       	ldd	r19, Y+5	; 0x05
    1e74:	22 30       	cpi	r18, 0x02	; 2
    1e76:	31 05       	cpc	r19, r1
    1e78:	69 f0       	breq	.+26     	; 0x1e94 <LCD_moveCursor+0x5e>
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	91 05       	cpc	r25, r1
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <LCD_moveCursor+0x66>
    1e84:	0e c0       	rjmp	.+28     	; 0x1ea2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	0b c0       	rjmp	.+22     	; 0x1ea2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	80 5c       	subi	r24, 0xC0	; 192
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	80 5f       	subi	r24, 0xF0	; 240
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	80 5b       	subi	r24, 0xB0	; 176
    1ea0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	80 68       	ori	r24, 0x80	; 128
    1ea6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_displayStringRowColumn+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <LCD_displayStringRowColumn+0x8>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	6a 83       	std	Y+2, r22	; 0x02
    1eca:	5c 83       	std	Y+4, r21	; 0x04
    1ecc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ed2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_displayString>
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	62 97       	sbiw	r28, 0x12	; 18
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	9a 8b       	std	Y+18, r25	; 0x12
    1f02:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f04:	89 89       	ldd	r24, Y+17	; 0x11
    1f06:	9a 89       	ldd	r25, Y+18	; 0x12
    1f08:	9e 01       	movw	r18, r28
    1f0a:	2f 5f       	subi	r18, 0xFF	; 255
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	b9 01       	movw	r22, r18
    1f10:	4a e0       	ldi	r20, 0x0A	; 10
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	0e 94 ed 12 	call	0x25da	; 0x25da <itoa>
   LCD_displayString(buff); /* Display the string */
    1f18:	ce 01       	movw	r24, r28
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_displayString>
}
    1f20:	62 96       	adiw	r28, 0x12	; 18
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_sendCommand>
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <LCD_sendData>:


static void LCD_sendData(uint8 data){
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1f60:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePort>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e8       	ldi	r26, 0x80	; 128
    1f6a:	bf e3       	ldi	r27, 0x3F	; 63
    1f6c:	89 8f       	std	Y+25, r24	; 0x19
    1f6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f70:	ab 8f       	std	Y+27, r26	; 0x1b
    1f72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	69 8d       	ldd	r22, Y+25	; 0x19
    1f76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a e7       	ldi	r20, 0x7A	; 122
    1f82:	53 e4       	ldi	r21, 0x43	; 67
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8d 8b       	std	Y+21, r24	; 0x15
    1f8e:	9e 8b       	std	Y+22, r25	; 0x16
    1f90:	af 8b       	std	Y+23, r26	; 0x17
    1f92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e8       	ldi	r20, 0x80	; 128
    1fa2:	5f e3       	ldi	r21, 0x3F	; 63
    1fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <LCD_sendData+0x70>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 8b       	std	Y+20, r25	; 0x14
    1fb2:	8b 8b       	std	Y+19, r24	; 0x13
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <LCD_sendData+0xee>
	else if (__tmp > 65535)
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	4c f5       	brge	.+82     	; 0x2020 <LCD_sendData+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fce:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e2       	ldi	r20, 0x20	; 32
    1fdc:	51 e4       	ldi	r21, 0x41	; 65
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9c 8b       	std	Y+20, r25	; 0x14
    1ff4:	8b 8b       	std	Y+19, r24	; 0x13
    1ff6:	0f c0       	rjmp	.+30     	; 0x2016 <LCD_sendData+0xd0>
    1ff8:	89 e1       	ldi	r24, 0x19	; 25
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a 8b       	std	Y+18, r25	; 0x12
    1ffe:	89 8b       	std	Y+17, r24	; 0x11
    2000:	89 89       	ldd	r24, Y+17	; 0x11
    2002:	9a 89       	ldd	r25, Y+18	; 0x12
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_sendData+0xbe>
    2008:	9a 8b       	std	Y+18, r25	; 0x12
    200a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	8b 89       	ldd	r24, Y+19	; 0x13
    200e:	9c 89       	ldd	r25, Y+20	; 0x14
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <LCD_sendData+0xb2>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <LCD_sendData+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2020:	6d 89       	ldd	r22, Y+21	; 0x15
    2022:	7e 89       	ldd	r23, Y+22	; 0x16
    2024:	8f 89       	ldd	r24, Y+23	; 0x17
    2026:	98 8d       	ldd	r25, Y+24	; 0x18
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9c 8b       	std	Y+20, r25	; 0x14
    2032:	8b 8b       	std	Y+19, r24	; 0x13
    2034:	8b 89       	ldd	r24, Y+19	; 0x13
    2036:	9c 89       	ldd	r25, Y+20	; 0x14
    2038:	98 8b       	std	Y+16, r25	; 0x10
    203a:	8f 87       	std	Y+15, r24	; 0x0f
    203c:	8f 85       	ldd	r24, Y+15	; 0x0f
    203e:	98 89       	ldd	r25, Y+16	; 0x10
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <LCD_sendData+0xfa>
    2044:	98 8b       	std	Y+16, r25	; 0x10
    2046:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	8b 87       	std	Y+11, r24	; 0x0b
    205c:	9c 87       	std	Y+12, r25	; 0x0c
    205e:	ad 87       	std	Y+13, r26	; 0x0d
    2060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6b 85       	ldd	r22, Y+11	; 0x0b
    2064:	7c 85       	ldd	r23, Y+12	; 0x0c
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a e7       	ldi	r20, 0x7A	; 122
    2070:	53 e4       	ldi	r21, 0x43	; 67
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8f 83       	std	Y+7, r24	; 0x07
    207c:	98 87       	std	Y+8, r25	; 0x08
    207e:	a9 87       	std	Y+9, r26	; 0x09
    2080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2082:	6f 81       	ldd	r22, Y+7	; 0x07
    2084:	78 85       	ldd	r23, Y+8	; 0x08
    2086:	89 85       	ldd	r24, Y+9	; 0x09
    2088:	9a 85       	ldd	r25, Y+10	; 0x0a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_sendData+0x15e>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_sendData+0x1dc>
	else if (__tmp > 65535)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_sendData+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_sendData+0x1be>
    20e6:	89 e1       	ldi	r24, 0x19	; 25
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_sendData+0x1ac>
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_sendData+0x1a0>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_sendData+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_sendData+0x1e8>
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2136:	6d 96       	adiw	r28, 0x1d	; 29
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <DcMotor_Init>:
 * 				setup the direction for the two
 * 				motor pins through the GPIO driver.
 * 			=> 	Stop at the DC-Motor at the beginning
 * 				through the GPIO driver.
 * */
void DcMotor_Init(void) {
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_RIGHT_PORT_ID, MOTOR_RIGHT_PIN_ID, PIN_OUTPUT);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_LEFT_PORT_ID, MOTOR_LEFT_PIN_ID, PIN_OUTPUT);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 ba 07 	call	0xf74	; 0xf74 <GPIO_setupPinDirection>
}
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <DcMotor_Rotate>:
 * 				DC Motor CW/ or A-CW or stop the motor based
 * 				on the state input state value.
 * 			=> 	Send the required duty cycle to the PWM driver
 * 				based on the required speed value.
 * */
void DcMotor_Rotate(DCMotor_State state, uint8 speed) {
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <DcMotor_Rotate+0x6>
    2170:	00 d0       	rcall	.+0      	; 0x2172 <DcMotor_Rotate+0x8>
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	6a 83       	std	Y+2, r22	; 0x02
	if (OFF == state)
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	82 30       	cpi	r24, 0x02	; 2
    217e:	21 f4       	brne	.+8      	; 0x2188 <DcMotor_Rotate+0x1e>
		PWM_Timer0_Start(0);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 75 07 	call	0xeea	; 0xeea <PWM_Timer0_Start>
    2186:	27 c0       	rjmp	.+78     	; 0x21d6 <DcMotor_Rotate+0x6c>
	else {
		switch (state) {
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3c 83       	std	Y+4, r19	; 0x04
    2190:	2b 83       	std	Y+3, r18	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	31 f0       	breq	.+12     	; 0x21a6 <DcMotor_Rotate+0x3c>
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	21 30       	cpi	r18, 0x01	; 1
    21a0:	31 05       	cpc	r19, r1
    21a2:	61 f0       	breq	.+24     	; 0x21bc <DcMotor_Rotate+0x52>
    21a4:	15 c0       	rjmp	.+42     	; 0x21d0 <DcMotor_Rotate+0x66>
		case CW:
			GPIO_writePin(MOTOR_RIGHT_PORT_ID, MOTOR_RIGHT_PIN_ID, LOGIC_HIGH);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
			GPIO_writePin(MOTOR_LEFT_PORT_ID, MOTOR_LEFT_PIN_ID, LOGIC_LOW);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
    21ba:	0a c0       	rjmp	.+20     	; 0x21d0 <DcMotor_Rotate+0x66>
			break;
		case ACW:
			GPIO_writePin(MOTOR_RIGHT_PORT_ID, MOTOR_RIGHT_PIN_ID, LOGIC_LOW);
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
			GPIO_writePin(MOTOR_LEFT_PORT_ID, MOTOR_LEFT_PIN_ID, LOGIC_HIGH);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 a5 08 	call	0x114a	; 0x114a <GPIO_writePin>
			break;
		default:
			break;
		}
		PWM_Timer0_Start(speed);
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	0e 94 75 07 	call	0xeea	; 0xeea <PWM_Timer0_Start>
	}
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <Application_Setup>:
#include "../HAL/LM35/LM35.h"

static void Application_init();
static void Application_splashScreen();

void Application_Setup() {
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	Application_init();
    21ec:	0e 94 96 11 	call	0x232c	; 0x232c <Application_init>
	Application_splashScreen();
    21f0:	0e 94 a3 11 	call	0x2346	; 0x2346 <Application_splashScreen>

}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <Application_Loop>:

void Application_Loop() {
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	6f 97       	sbiw	r28, 0x1f	; 31
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    220e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_clearScreen>
	uint8 x = LM35_readTemp();
    2212:	0e 94 2b 0c 	call	0x1856	; 0x1856 <LM35_readTemp>
    2216:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 a[16];
	itoa(x, a, 10);
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9e 01       	movw	r18, r28
    2220:	20 5f       	subi	r18, 0xF0	; 240
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	b9 01       	movw	r22, r18
    2226:	4a e0       	ldi	r20, 0x0A	; 10
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	0e 94 ed 12 	call	0x25da	; 0x25da <itoa>
	LCD_displayString(a);
    222e:	ce 01       	movw	r24, r28
    2230:	40 96       	adiw	r24, 0x10	; 16
    2232:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_displayString>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	aa e7       	ldi	r26, 0x7A	; 122
    223c:	b4 e4       	ldi	r27, 0x44	; 68
    223e:	8b 87       	std	Y+11, r24	; 0x0b
    2240:	9c 87       	std	Y+12, r25	; 0x0c
    2242:	ad 87       	std	Y+13, r26	; 0x0d
    2244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a e7       	ldi	r20, 0x7A	; 122
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8f 83       	std	Y+7, r24	; 0x07
    2260:	98 87       	std	Y+8, r25	; 0x08
    2262:	a9 87       	std	Y+9, r26	; 0x09
    2264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	2c f4       	brge	.+10     	; 0x2288 <Application_Loop+0x8e>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <Application_Loop+0x10c>
	else if (__tmp > 65535)
    2288:	6f 81       	ldd	r22, Y+7	; 0x07
    228a:	78 85       	ldd	r23, Y+8	; 0x08
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f5       	brge	.+82     	; 0x22f2 <Application_Loop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <Application_Loop+0xee>
    22ca:	89 e1       	ldi	r24, 0x19	; 25
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <Application_Loop+0xdc>
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <Application_Loop+0xd0>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <Application_Loop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <Application_Loop+0x118>
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    231a:	6f 96       	adiw	r28, 0x1f	; 31
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <Application_init>:

static void Application_init(){
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    2334:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <LCD_init>
	DcMotor_Init();
    2338:	0e 94 a4 10 	call	0x2148	; 0x2148 <DcMotor_Init>
	LM35_init();
    233c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LM35_init>
}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <Application_splashScreen>:

static void Application_splashScreen(){
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	6c 97       	sbiw	r28, 0x1c	; 28
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
	LCD_displayString("Welcome to ur Fan");
    235a:	80 e6       	ldi	r24, 0x60	; 96
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_displayString>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	aa ef       	ldi	r26, 0xFA	; 250
    2368:	b3 e4       	ldi	r27, 0x43	; 67
    236a:	89 8f       	std	Y+25, r24	; 0x19
    236c:	9a 8f       	std	Y+26, r25	; 0x1a
    236e:	ab 8f       	std	Y+27, r26	; 0x1b
    2370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	69 8d       	ldd	r22, Y+25	; 0x19
    2374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a e7       	ldi	r20, 0x7A	; 122
    2380:	53 e4       	ldi	r21, 0x43	; 67
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8d 8b       	std	Y+21, r24	; 0x15
    238c:	9e 8b       	std	Y+22, r25	; 0x16
    238e:	af 8b       	std	Y+23, r26	; 0x17
    2390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2392:	6d 89       	ldd	r22, Y+21	; 0x15
    2394:	7e 89       	ldd	r23, Y+22	; 0x16
    2396:	8f 89       	ldd	r24, Y+23	; 0x17
    2398:	98 8d       	ldd	r25, Y+24	; 0x18
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <Application_splashScreen+0x6e>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9c 8b       	std	Y+20, r25	; 0x14
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <Application_splashScreen+0xec>
	else if (__tmp > 65535)
    23b4:	6d 89       	ldd	r22, Y+21	; 0x15
    23b6:	7e 89       	ldd	r23, Y+22	; 0x16
    23b8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ba:	98 8d       	ldd	r25, Y+24	; 0x18
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <Application_splashScreen+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	69 8d       	ldd	r22, Y+25	; 0x19
    23ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <Application_splashScreen+0xce>
    23f6:	89 e1       	ldi	r24, 0x19	; 25
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9a 8b       	std	Y+18, r25	; 0x12
    23fc:	89 8b       	std	Y+17, r24	; 0x11
    23fe:	89 89       	ldd	r24, Y+17	; 0x11
    2400:	9a 89       	ldd	r25, Y+18	; 0x12
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <Application_splashScreen+0xbc>
    2406:	9a 8b       	std	Y+18, r25	; 0x12
    2408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8b 89       	ldd	r24, Y+19	; 0x13
    240c:	9c 89       	ldd	r25, Y+20	; 0x14
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <Application_splashScreen+0xb0>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <Application_splashScreen+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6d 89       	ldd	r22, Y+21	; 0x15
    2420:	7e 89       	ldd	r23, Y+22	; 0x16
    2422:	8f 89       	ldd	r24, Y+23	; 0x17
    2424:	98 8d       	ldd	r25, Y+24	; 0x18
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	98 8b       	std	Y+16, r25	; 0x10
    2438:	8f 87       	std	Y+15, r24	; 0x0f
    243a:	8f 85       	ldd	r24, Y+15	; 0x0f
    243c:	98 89       	ldd	r25, Y+16	; 0x10
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <Application_splashScreen+0xf8>
    2442:	98 8b       	std	Y+16, r25	; 0x10
    2444:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_clearScreen();
    2446:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_clearScreen>
	LCD_displayString("The Fan Will");
    244a:	82 e7       	ldi	r24, 0x72	; 114
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"follow the temp");
    2452:	2f e7       	ldi	r18, 0x7F	; 127
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	a9 01       	movw	r20, r18
    245c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayStringRowColumn>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	aa ef       	ldi	r26, 0xFA	; 250
    2466:	b3 e4       	ldi	r27, 0x43	; 67
    2468:	8b 87       	std	Y+11, r24	; 0x0b
    246a:	9c 87       	std	Y+12, r25	; 0x0c
    246c:	ad 87       	std	Y+13, r26	; 0x0d
    246e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a e7       	ldi	r20, 0x7A	; 122
    247e:	53 e4       	ldi	r21, 0x43	; 67
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	8f 83       	std	Y+7, r24	; 0x07
    248a:	98 87       	std	Y+8, r25	; 0x08
    248c:	a9 87       	std	Y+9, r26	; 0x09
    248e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <Application_splashScreen+0x16c>
		__ticks = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <Application_splashScreen+0x1ea>
	else if (__tmp > 65535)
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	4c f5       	brge	.+82     	; 0x251c <Application_splashScreen+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    24cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <Application_splashScreen+0x1cc>
    24f4:	89 e1       	ldi	r24, 0x19	; 25
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <Application_splashScreen+0x1ba>
    2504:	9c 83       	std	Y+4, r25	; 0x04
    2506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f7       	brne	.-38     	; 0x24f4 <Application_splashScreen+0x1ae>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <Application_splashScreen+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <Application_splashScreen+0x1f6>
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	LCD_clearScreen();
    2544:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LCD_clearScreen>
}
    2548:	6c 96       	adiw	r28, 0x1c	; 28
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <main>:
 */

#include "Application/Application.h"


int main(void) {
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	Application_Setup();
    2562:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <Application_Setup>
	while (1) {
		Application_Loop();
    2566:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Application_Loop>
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <main+0xc>

0000256c <__prologue_saves__>:
    256c:	2f 92       	push	r2
    256e:	3f 92       	push	r3
    2570:	4f 92       	push	r4
    2572:	5f 92       	push	r5
    2574:	6f 92       	push	r6
    2576:	7f 92       	push	r7
    2578:	8f 92       	push	r8
    257a:	9f 92       	push	r9
    257c:	af 92       	push	r10
    257e:	bf 92       	push	r11
    2580:	cf 92       	push	r12
    2582:	df 92       	push	r13
    2584:	ef 92       	push	r14
    2586:	ff 92       	push	r15
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	ca 1b       	sub	r28, r26
    2596:	db 0b       	sbc	r29, r27
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	09 94       	ijmp

000025a4 <__epilogue_restores__>:
    25a4:	2a 88       	ldd	r2, Y+18	; 0x12
    25a6:	39 88       	ldd	r3, Y+17	; 0x11
    25a8:	48 88       	ldd	r4, Y+16	; 0x10
    25aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    25ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    25ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b6:	b9 84       	ldd	r11, Y+9	; 0x09
    25b8:	c8 84       	ldd	r12, Y+8	; 0x08
    25ba:	df 80       	ldd	r13, Y+7	; 0x07
    25bc:	ee 80       	ldd	r14, Y+6	; 0x06
    25be:	fd 80       	ldd	r15, Y+5	; 0x05
    25c0:	0c 81       	ldd	r16, Y+4	; 0x04
    25c2:	1b 81       	ldd	r17, Y+3	; 0x03
    25c4:	aa 81       	ldd	r26, Y+2	; 0x02
    25c6:	b9 81       	ldd	r27, Y+1	; 0x01
    25c8:	ce 0f       	add	r28, r30
    25ca:	d1 1d       	adc	r29, r1
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	ed 01       	movw	r28, r26
    25d8:	08 95       	ret

000025da <itoa>:
    25da:	fb 01       	movw	r30, r22
    25dc:	9f 01       	movw	r18, r30
    25de:	e8 94       	clt
    25e0:	42 30       	cpi	r20, 0x02	; 2
    25e2:	c4 f0       	brlt	.+48     	; 0x2614 <itoa+0x3a>
    25e4:	45 32       	cpi	r20, 0x25	; 37
    25e6:	b4 f4       	brge	.+44     	; 0x2614 <itoa+0x3a>
    25e8:	4a 30       	cpi	r20, 0x0A	; 10
    25ea:	29 f4       	brne	.+10     	; 0x25f6 <itoa+0x1c>
    25ec:	97 fb       	bst	r25, 7
    25ee:	1e f4       	brtc	.+6      	; 0x25f6 <itoa+0x1c>
    25f0:	90 95       	com	r25
    25f2:	81 95       	neg	r24
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	64 2f       	mov	r22, r20
    25f8:	77 27       	eor	r23, r23
    25fa:	0e 94 1e 13 	call	0x263c	; 0x263c <__udivmodhi4>
    25fe:	80 5d       	subi	r24, 0xD0	; 208
    2600:	8a 33       	cpi	r24, 0x3A	; 58
    2602:	0c f0       	brlt	.+2      	; 0x2606 <itoa+0x2c>
    2604:	89 5d       	subi	r24, 0xD9	; 217
    2606:	81 93       	st	Z+, r24
    2608:	cb 01       	movw	r24, r22
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	a1 f7       	brne	.-24     	; 0x25f6 <itoa+0x1c>
    260e:	16 f4       	brtc	.+4      	; 0x2614 <itoa+0x3a>
    2610:	5d e2       	ldi	r21, 0x2D	; 45
    2612:	51 93       	st	Z+, r21
    2614:	10 82       	st	Z, r1
    2616:	c9 01       	movw	r24, r18
    2618:	0c 94 0e 13 	jmp	0x261c	; 0x261c <strrev>

0000261c <strrev>:
    261c:	dc 01       	movw	r26, r24
    261e:	fc 01       	movw	r30, r24
    2620:	67 2f       	mov	r22, r23
    2622:	71 91       	ld	r23, Z+
    2624:	77 23       	and	r23, r23
    2626:	e1 f7       	brne	.-8      	; 0x2620 <strrev+0x4>
    2628:	32 97       	sbiw	r30, 0x02	; 2
    262a:	04 c0       	rjmp	.+8      	; 0x2634 <strrev+0x18>
    262c:	7c 91       	ld	r23, X
    262e:	6d 93       	st	X+, r22
    2630:	70 83       	st	Z, r23
    2632:	62 91       	ld	r22, -Z
    2634:	ae 17       	cp	r26, r30
    2636:	bf 07       	cpc	r27, r31
    2638:	c8 f3       	brcs	.-14     	; 0x262c <strrev+0x10>
    263a:	08 95       	ret

0000263c <__udivmodhi4>:
    263c:	aa 1b       	sub	r26, r26
    263e:	bb 1b       	sub	r27, r27
    2640:	51 e1       	ldi	r21, 0x11	; 17
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <__udivmodhi4_ep>

00002644 <__udivmodhi4_loop>:
    2644:	aa 1f       	adc	r26, r26
    2646:	bb 1f       	adc	r27, r27
    2648:	a6 17       	cp	r26, r22
    264a:	b7 07       	cpc	r27, r23
    264c:	10 f0       	brcs	.+4      	; 0x2652 <__udivmodhi4_ep>
    264e:	a6 1b       	sub	r26, r22
    2650:	b7 0b       	sbc	r27, r23

00002652 <__udivmodhi4_ep>:
    2652:	88 1f       	adc	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	5a 95       	dec	r21
    2658:	a9 f7       	brne	.-22     	; 0x2644 <__udivmodhi4_loop>
    265a:	80 95       	com	r24
    265c:	90 95       	com	r25
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	08 95       	ret

00002664 <_exit>:
    2664:	f8 94       	cli

00002666 <__stop_program>:
    2666:	ff cf       	rjmp	.-2      	; 0x2666 <__stop_program>
